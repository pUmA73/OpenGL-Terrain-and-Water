// tessellation control shader
#version 410 core

// specify the number of control points per patch output
// this value controls the size of the input and output arrays
layout(vertices = 4) out;

// varying input from vertex shader
in vec2 TexCoord[];
// varying output to the evaluation shader
out vec2 TextureCoord[];

uniform mat4 model;
uniform mat4 view;

void main()
{
	// pass attributes through
	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	TextureCoord[gl_InvocationID] = TexCoord[gl_InvocationID];

	// invocation zero controls tessellation levels for the entire patch
	if (gl_InvocationID == 0)
	{
		const int MIN_TESS_LVL = 4;
		const int MAX_TESS_LVL = 64;
		const float MIN_DIST = 20;
		const float MAX_DIST = 800;

		vec4 eyeSpacePos00 = view * model * gl_in[0].gl_Position;
		vec4 eyeSpacePos01 = view * model * gl_in[1].gl_Position;
		vec4 eyeSpacePos10 = view * model * gl_in[2].gl_Position;
		vec4 eyeSpacePos11 = view * model * gl_in[3].gl_Position;

		// distance from camera scaled in range [0, 1];
		float dist00 = clamp((abs(eyeSpacePos00.z) - MIN_DIST) / (MAX_DIST - MIN_DIST), 0.0, 1.0);
		float dist01 = clamp((abs(eyeSpacePos01.z) - MIN_DIST) / (MAX_DIST - MIN_DIST), 0.0, 1.0);
		float dist10 = clamp((abs(eyeSpacePos10.z) - MIN_DIST) / (MAX_DIST - MIN_DIST), 0.0, 1.0);
		float dist11 = clamp((abs(eyeSpacePos11.z) - MIN_DIST) / (MAX_DIST - MIN_DIST), 0.0, 1.0);

		float tessLevel0 = mix(MAX_TESS_LVL, MIN_TESS_LVL, min(dist10, dist00));
		float tessLevel1 = mix(MAX_TESS_LVL, MIN_TESS_LVL, min(dist00, dist01));
		float tessLevel2 = mix(MAX_TESS_LVL, MIN_TESS_LVL, min(dist01, dist11));
		float tessLevel3 = mix(MAX_TESS_LVL, MIN_TESS_LVL, min(dist11, dist10));

		gl_TessLevelOuter[0] = tessLevel0;
		gl_TessLevelOuter[1] = tessLevel1;
		gl_TessLevelOuter[2] = tessLevel2;
		gl_TessLevelOuter[3] = tessLevel3;

		gl_TessLevelInner[0] = max(tessLevel1, tessLevel3);
		gl_TessLevelInner[1] = max(tessLevel0, tessLevel2);
	}
}
